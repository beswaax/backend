{"version":3,"sources":["components/Note.js","services/notes.js","Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","key","id","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","put","Notification","message","className","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","notesService","console","log","notesToShow","filter","map","item","find","n","changedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","type","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"kOAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,wBAAIC,IAAKJ,EAAKK,IACXL,EAAKM,QACN,4BAAQC,QAASN,GAAmBC,K,gBCNpCM,EAAU,8BAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACR,EAAIS,GAElB,OADgBL,IAAMO,IAAN,UAAaR,EAAb,YAAwBH,GAAMS,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCN9BI,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,yBAAKC,UAAU,SAASD,IC0FlBE,EA1FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WAERC,IAAsBpB,MAAK,SAACC,GAC1BW,EAASX,QAEV,IAoBHoB,QAAQC,IAAIX,GACZ,IA4BMY,EAAcR,EAChBJ,EACAA,EAAMa,QAAO,SAACnC,GAAD,OAA6B,IAAnBA,EAAKG,aAEhC,OACE,6BACE,qCACA,kBAAC,EAAD,CAAce,QAASU,IACvB,6BACE,4BAAQrB,QAAS,kBAAMoB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGQ,EAAYE,KAAI,SAACC,GAAD,OACf,kBAAC,EAAD,CACEjC,IAAKiC,EAAKhC,GACVL,KAAMqC,EACNpC,iBAAkB,kBAzCD,SAACI,GACjB,sCAAkCA,GAA3C,IACML,EAAOsB,EAAMgB,MAAK,SAACC,GAAD,OAAOA,EAAElC,KAAOA,KAClCmC,EAAW,2BAAQxC,GAAR,IAAcG,WAAYH,EAAKG,YAEhD4B,EACU1B,EAAImC,GACX7B,MAAK,SAACC,GACLW,EAASD,EAAMc,KAAI,SAACpC,GAAD,OAAWA,EAAKK,KAAOA,EAAKL,EAAOY,SAEvD6B,OAAM,SAACC,GACNb,EAAgB,QAAD,OACL7B,EAAKM,QADA,yCAGfqC,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMa,QAAO,SAACI,GAAD,OAAOA,EAAElC,KAAOA,SAwBVuC,CAAmBP,EAAKhC,WAItD,0BAAMwC,SArEM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB1C,QAASkB,EACTyB,MAAM,IAAIC,MAAOC,cACjBhD,UAAWiD,KAAKC,SAAW,IAG7BtB,EAAoBiB,GAAYrC,MAAK,SAACC,GACpCW,EAASD,EAAMgC,OAAO1C,IACtBa,EAAW,SA4DT,2BAAO8B,MAAO/B,EAASgC,KAAK,OAAOC,SAnDhB,SAACX,GACxBd,QAAQC,IAAIa,EAAMY,OAAOH,OACzB9B,EAAWqB,EAAMY,OAAOH,UAkDpB,4BAAQC,KAAK,UAAb,W,MCrDRG,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f7934f40.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li key={note.id}>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"http://localhost:3001/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default {\n  getAll: getAll,\n  create: create,\n  update: update,\n};\n","import React from \"react\";\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Axios from \"axios\";\nimport notesService from \"./services/notes\";\nimport Notification from \"./Notification\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"some error happened...\");\n\n  useEffect(() => {\n    //getAll uses gets everything inside of the url, then takes the response(promise obj) and changes state of notes to the response.data which is the things inside of the server.\n    notesService.getAll().then((response) => {\n      setNotes(response);\n    });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    notesService.create(noteObject).then((response) => {\n      setNotes(notes.concat(response));\n      setNewNote(\"\");\n    });\n    //axios.post(\"http://localhost:3001/notes\", noteObject).then((response) => {\n    // setNotes(notes.concat(response.data));\n    //  setNewNote(\"\");\n    //});\n  };\n\n  console.log(notes);\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`;\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    notesService\n      .update(id, changedNote)\n      .then((response) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : response)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note ${note.content} was already removed from the server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n    //axios.put(url, changedNote).then((response) => {\n    //setNotes(notes.map((note) => (note.id !== id ? note : response.data)));\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((item) => (\n          <Note\n            key={item.id}\n            note={item}\n            toggleImportance={() => toggleImportanceOf(item.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} type=\"text\" onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n/*\naxios.get(\"http://localhost:3001/notes\").then((response) => {\n  const notes = response.data;\n  return notes;\n});\n*/\n//.then is what you cann after you use the axios.get of fetch on something, it takes in as parameter the result of the fetch or get call, and you can do to that whatever you want.\n\n//useEffect is run only after the component gets rendered\n//useEffect takes two parameters, first is the function to run and the second indicates how often to run the effect(first parameter). If it is an empty array, it will only run once, along with the first render of the component.first\n\nconst notes = [\n  {\n    id: 1,\n    content: \"HTML is easys\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  },\n  {\n    id: 2,\n    content: \"Browser can execute only Javascript\",\n    date: \"2019-05-30T18:39:34.091Z\",\n    important: false,\n  },\n  {\n    id: 3,\n    content: \"GET and POST are the most important methods of HTTP protocol\",\n    date: \"2019-05-30T19:20:14.298Z\",\n    important: true,\n  },\n];\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}